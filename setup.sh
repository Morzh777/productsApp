#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Products App - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞${NC}"
echo "================================================"

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
    exit 1
fi

# Check Node.js version
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo -e "${RED}‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $(node -v)${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Node.js $(node -v) –Ω–∞–π–¥–µ–Ω${NC}"

# Check if nginx is installed
if ! command -v nginx &> /dev/null; then
    echo -e "${YELLOW}üì¶ Nginx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...${NC}"
    
    # Detect OS and install nginx
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v brew &> /dev/null; then
            brew install nginx
        else
            echo -e "${RED}‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Nginx –≤—Ä—É—á–Ω—É—é: brew install nginx${NC}"
            exit 1
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        if command -v apt-get &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y nginx
        elif command -v yum &> /dev/null; then
            sudo yum install -y nginx
        else
            echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Nginx –≤—Ä—É—á–Ω—É—é.${NC}"
            exit 1
        fi
    else
        echo -e "${RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Nginx –≤—Ä—É—á–Ω—É—é.${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Nginx –Ω–∞–π–¥–µ–Ω${NC}"

# Install root dependencies (local installation)
echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)...${NC}"
npm install --no-global

# Install backend dependencies (local installation)
echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ backend (–ª–æ–∫–∞–ª—å–Ω–æ)...${NC}"
cd backend/nest-api
npm install --no-global

# Create backend .env file (production)
echo -e "${YELLOW}‚öôÔ∏è  –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è backend (production)...${NC}"
cat > .env << EOF
DATABASE_URL="postgresql://neondb_owner:npg_vGY5fHwSoqZ9@ep-wandering-king-agz11e0s-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require&connection_limit=5&pool_timeout=20&connect_timeout=60"
PORT=3002
NODE_ENV=production
EOF

echo -e "${GREEN}‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è backend${NC}"

# Generate Prisma client
echo -e "${YELLOW}üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç...${NC}"
npx prisma generate

# Run migrations
echo -e "${YELLOW}üóÑÔ∏è  –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
npx prisma migrate deploy

# Build backend
echo -e "${YELLOW}üèóÔ∏è  –°–±–æ—Ä–∫–∞ backend (production)...${NC}"
npm run build

echo -e "${GREEN}‚úÖ Backend –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ${NC}"

# Install frontend dependencies (local installation)
echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend (–ª–æ–∫–∞–ª—å–Ω–æ)...${NC}"
cd ../../frontend/next-app
npm install --no-global

# Create frontend .env.local file
echo -e "${YELLOW}‚öôÔ∏è  –°–æ–∑–¥–∞–µ–º .env.local —Ñ–∞–π–ª –¥–ª—è frontend...${NC}"
cat > .env.local << EOF
NEXT_PUBLIC_API_URL=http://localhost:8080/api
EOF

echo -e "${GREEN}‚úÖ .env.local —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è frontend${NC}"

# Setup Nginx
echo -e "${YELLOW}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Nginx...${NC}"

# Go back to root directory for nginx config
cd ../..

# Test nginx config
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx...${NC}"
if nginx -t -c $(pwd)/nginx.conf; then
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx${NC}"
    exit 1
fi

# Start nginx with our config (port 80 requires sudo)
echo -e "${YELLOW}üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Nginx (–µ—Å–ª–∏ –µ—Å—Ç—å)...${NC}"
nginx -s stop 2>/dev/null || true
if lsof -i :8080 >/dev/null 2>&1; then
  PID=$(lsof -ti :8080 | head -n1)
  if [ -n "$PID" ]; then kill -9 $PID 2>/dev/null || true; fi
fi

echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Nginx...${NC}"
nginx -c $(pwd)/nginx.conf &
NGINX_PID=$!

echo -e "${GREEN}‚úÖ Nginx –∑–∞–ø—É—â–µ–Ω${NC}"

echo ""
echo -e "${GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
echo ""
echo -e "${BLUE}üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:${NC}"
echo "  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã .env —Ñ–∞–π–ª—ã"
echo "  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo "  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω Nginx"
echo ""
echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...${NC}"
echo ""
echo -e "${BLUE}üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å–∞–º:${NC}"
echo "  üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ${GREEN}http://localhost:8080${NC}"
echo "  üîß API:         ${GREEN}http://localhost:8080/api${NC}"
echo "  üìö Swagger:     ${GREEN}http://localhost:8080/swagger${NC}"
echo ""
echo -e "${YELLOW}üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C${NC}"
echo ""

# Start backend in background (production)
cd backend/nest-api
echo -e "${YELLOW}üßπ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 3002 (–µ—Å–ª–∏ –∑–∞–Ω—è—Ç)...${NC}"
if lsof -i :3002 >/dev/null 2>&1; then
  BPID=$(lsof -ti :3002 | head -n1)
  if [ -n "$BPID" ]; then kill -9 $BPID 2>/dev/null || true; fi
fi
if [ ! -f dist/src/main.js ]; then
  echo -e "${YELLOW}üèóÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω dist/src/main.js ‚Äî –≤—ã–ø–æ–ª–Ω—è—é —Å–±–æ—Ä–∫—É backend...${NC}"
  npm run build
fi
npm run start:prod &
BACKEND_PID=$!

# Wait a bit for backend to start
sleep 3

# Build and start frontend (production)
cd ../../frontend/next-app
echo -e "${YELLOW}üèóÔ∏è  –°–±–æ—Ä–∫–∞ frontend (production)...${NC}"
npm run build
echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ frontend (production)...${NC}"
npm run start &
FRONTEND_PID=$!

# Function to handle cleanup on exit
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã...${NC}"
    kill $BACKEND_PID 2>/dev/null
    kill $FRONTEND_PID 2>/dev/null
    kill $NGINX_PID 2>/dev/null
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Wait for both processes
wait $BACKEND_PID $FRONTEND_PID
